      * dbpre V 0.4: pgmtest.lst                                 20210702-142920
------*-------------------------------------------------------------------------
----+-*--1----+----2----+----3----+----4----+----5----+----6----+----7-*--+----8
      **************************************************************************
      *I D E N T I F I C A T I O N   D I V I S I O N                         *
      **************************************************************************
       IDENTIFICATION              DIVISION.
       PROGRAM-ID.                 pgmtest.
DBPRE *AUTHOR.                     Thomas.
                                                 
      **************************************************************************
      *D A T A    D I V I S I O N                                            *
      **************************************************************************
       DATA DIVISION.
                                                 
       FILE SECTION.
                                                 
      /
      **************************************************************************
      *W O R K I N G   S T O R A G E   S E C T I O N                         *
      **************************************************************************
       WORKING-STORAGE SECTION.
       01 PrenomB Pic X(15).
       01 NomB Pic X(15).
                                                 
      *The needed working storage stuff for the framework
      *EXEC SQL
      *    INCLUDE PGCTBPARAM.
----+-*--1-!--+----2----+----3----+----4----+----5----+----6----+----7-!--+----8
        01  PGCTB-PARAM-BLOCK.
          05  PGCTB-PROGRAM-NAME              PIC X(10).
          05  FILLER                          PIC X VALUE LOW-VALUE.
          05  PGCTB-DATE                      PIC X(10).
          05  PGCTB-TIME                      PIC X(10).
          05  PGCTB-STAGE                     PIC 9.
          05  PGCTB-STATUS-FLD                PIC 9(03).
            88 PGCTB-OK                       VALUE 0.
            88 PGCTB-NO-DATA                  VALUE 1.
            88 PGCTB-INVALID-INPUT            VALUE 2.
            88 PGCTB-INVALID-REQUEST          VALUE 3.
            88 PGCTB-ERROR                    VALUE 1 THRU 999.
          05  PGCTB-ERROR-MESSAGE             PIC X(67).
          05  PGCTB-ERRNO                     PIC 9(04).
          05  PGCTB-SQLCA-PTR                 POINTER.
DBPRE *END-EXEC.
                                                 
       01  PGCTB-VERSION                    PIC  X(38)
           VALUE '20120426 1.0 INITIAL RELEASE'.
      *The communication area for the database
      *EXEC SQL
      *    INCLUDE SQLCA
        01  SQLCA.
          05 SQLCA-CID                     USAGE POINTER.
          05 SQLCA-CURSOR-CTRL-GRP.
            10 SQLCA-CURSOR-CTRL OCCURS 65 PIC X.
          05 SQLCA-RESULT-GRP OCCURS 65.
            10 SQLCA-RESULT                USAGE POINTER.
          05 SQLCA-SEQUENCE                PIC 9(08).
          05 SQLCA-COUNT                   PIC 9(08).
          05 FILLER                        PIC X VALUE LOW-VALUE.
          05 SQLCA-RETURN-CODE             PIC 9(03).
          05 SQLCA-CROWCNT                 PIC X(08).
          05 SQLCA-ROWCNT                  PIC 9(08).
            88 SQLCA-NO-ROW                VALUE 0.
            88 SQLCA-ONE-ROW               VALUE 1.
            88 SQLCA-MORE-THAN-ONE-ROW     VALUE 2 THRU 99999999.
          05 FILLER                        PIC X VALUE LOW-VALUE.
          05 SQLCA-HOST                    PIC X(32).
          05 FILLER                        PIC X VALUE LOW-VALUE.
          05 SQLCA-USER                    PIC X(32).
          05 FILLER                        PIC X VALUE LOW-VALUE.
          05 SQLCA-PASSWD                  PIC X(32).
          05 FILLER                        PIC X VALUE LOW-VALUE.
          05 SQLCA-DBNAME                  PIC X(32).
          05 FILLER                        PIC X VALUE LOW-VALUE.
          05 SQLCA-PORT                    PIC 9(05).
          05 FILLER                        PIC X VALUE LOW-VALUE.
          05 SQLCA-SOCKET                  PIC X(32).
          05 FILLER                        PIC X VALUE LOW-VALUE.
          05 SQLCA-QUOTE                   PIC X VALUE "'".
          05 SQLCA-CARD                    PIC X(80).
          05 SQLCA-STATEMENT.
            10 SQLCA-STAT-LINE OCCURS 80   PIC X(25).
          05 FILLER                        PIC X VALUE LOW-VALUE.
          05 SQLCODE                       PIC 9(03).
            88 DB-OK                       VALUE 0.
            88 DB-CURSOR-ALREADY-OPEN      VALUE -1.
            88 DB-CURSOR-NOT-OPEN          VALUE -2.
            88 DB-NOT-FOUND                VALUE 100.
DBPRE *END-EXEC.
                                                 
      **************************************************************************
      *P R O C E D U R E   D I V I S I O N                                   *
      **************************************************************************
       PROCEDURE DIVISION.
      *The framework itself, calling PGCTB-ACTION to run the users coding
DBPRE  MOVE 1             TO SQLCA-SEQUENCE
      *EXEC SQL
      *    INCLUDE PGCTBBAT REPLACING 'TTTTNNNB' BY 'pgmtest'.
                                                 
----+-*--1-!--+----2----+----3----+----4----+----5----+----6----+----7-!--+----8
      *
           MOVE 'pgmtest'                  TO PGCTB-PROGRAM-NAME
           SET PGCTB-OK                     TO TRUE
           SET DB-OK                        TO TRUE
      *
           CALL "read_params"         USING PGCTB-PROGRAM-NAME
                                            SQLCA-HOST
                                            SQLCA-USER
                                            SQLCA-PASSWD
                                            SQLCA-DBNAME
                                            SQLCA-PORT
                                            SQLCA-SOCKET
           END-CALL
      *
           INSPECT SQLCA-HOST REPLACING ALL LOW-VALUE BY SPACE
           INSPECT SQLCA-USER REPLACING ALL LOW-VALUE BY SPACE
           INSPECT SQLCA-PASSWD REPLACING ALL LOW-VALUE BY SPACE
           INSPECT SQLCA-DBNAME REPLACING ALL LOW-VALUE BY SPACE
           INSPECT SQLCA-PORT REPLACING ALL LOW-VALUE BY SPACE
           INSPECT SQLCA-SOCKET REPLACING ALL LOW-VALUE BY SPACE
      *
           SET PGCTB-SQLCA-PTR              TO ADDRESS OF SQLCA
      *
      * All cursors are closed at the beginning
           MOVE ALL '0'                     TO SQLCA-CURSOR-CTRL-GRP
      *
           ACCEPT PGCTB-DATE                FROM DATE
           ACCEPT PGCTB-TIME                FROM TIME
                                                 
      * Initialize the database connection
DBPRE      MOVE 2             TO SQLCA-SEQUENCE
      *    EXEC SQL
      *       INIT DB
DBPRE         CALL "MySQL_init"  USING SQLCA-CID
DBPRE         END-CALL
DBPRE         MOVE RETURN-CODE    TO SQLCODE
DBPRE *    END-EXEC.
           EVALUATE TRUE
           WHEN DB-OK
              CONTINUE
           WHEN DB-NOT-FOUND
              SET DB-OK              TO TRUE
           WHEN OTHER
              PERFORM DB-STATUS
           END-EVALUATE
                                                 
DBPRE      MOVE 3             TO SQLCA-SEQUENCE
      *    EXEC SQL
      *       CONNECT DB
DBPRE         CALL "MySQL_real_connect" USING
DBPRE                                   SQLCA-HOST
DBPRE                                   SQLCA-USER
DBPRE                                   SQLCA-PASSWD
DBPRE                                   SQLCA-DBNAME
DBPRE                                   SQLCA-PORT
DBPRE                                   SQLCA-SOCKET
DBPRE         END-CALL
DBPRE         MOVE RETURN-CODE    TO SQLCODE
DBPRE *    END-EXEC.
           EVALUATE TRUE
           WHEN DB-OK
              CONTINUE
           WHEN DB-NOT-FOUND
              SET DB-OK              TO TRUE
           WHEN OTHER
              PERFORM DB-STATUS
           END-EVALUATE
      *
      * Now execute the user's code
           PERFORM PGCTB-ACTION
      *    DISPLAY 'After PGCTB-ACTION (batch program)'
      *
      * Any errors?
           PERFORM DB-STATUS
      *    DISPLAY 'After DB-STATUS (batch program)'
      *    DISPLAY 'SQLCODE=' SQLCODE
      *
      * Commit the work
      *    DISPLAY 'Before COMMIT (batch program)'
DBPRE      MOVE 4             TO SQLCA-SEQUENCE
      *    EXEC SQL
      *       COMMIT
DBPRE         CALL "MySQL_commit"
DBPRE         END-CALL

DBPRE         MOVE RETURN-CODE    TO SQLCODE
DBPRE         IF RETURN-CODE NOT = 0 THEN
DBPRE            PERFORM DB-STATUS
DBPRE         END-IF
DBPRE *    END-EXEC.
      *    DISPLAY 'After COMMIT (batch program)'
      *
      * We're done, now close the database and stop the program
DBPRE      MOVE 5             TO SQLCA-SEQUENCE
      *    EXEC SQL
      *        CLOSE DB
DBPRE          CALL "MySQL_close"

DBPRE          END-CALL

DBPRE          MOVE RETURN-CODE    TO SQLCODE

DBPRE *    END-EXEC.
      *    DISPLAY 'After CLOSE DB (batch program)'
           PERFORM DB-STATUS
                                                 
      *
      * No error, return zero
      *
           MOVE 0                       TO RETURN-CODE
           .
       PGCTB-MAIN-EXIT.
           STOP RUN.
      /
      *************************************************************************
       PGCTB-STATUS SECTION.
           IF PGCTB-ERROR
              IF PGCTB-ERROR-MESSAGE = SPACES
                 STRING PGCTB-PROGRAM-NAME    DELIMITED BY SIZE
                        ': PGCTB-STATUS-FLD ' DELIMITED BY SIZE
                         PGCTB-STATUS-FLD     DELIMITED BY SIZE
                         ' is set!'         DELIMITED BY SIZE
                                   INTO PGCTB-ERROR-MESSAGE
              END-IF
                  PERFORM PGCTB-DISPLAY-ERROR
      *
      * Rollback the work
DBPRE         MOVE 6             TO SQLCA-SEQUENCE
      *       EXEC SQL
      *          ROLLBACK
DBPRE          CALL "MySQL_rollback"
DBPRE          END-CALL
DBPRE          MOVE RETURN-CODE    TO SQLCODE
DBPRE *       END-EXEC.
              MOVE 2                       TO RETURN-CODE
              STOP RUN
           END-IF
           .
       PGCTB-STATUS-EXIT.
           EXIT.
      *************************************************************************
       PGCTB-DISPLAY-ERROR SECTION.
                                                 
           DISPLAY '** ' PGCTB-ERROR-MESSAGE ' **'.
                                                 
       PGCTB-DISPLAY-ERROR-EXIT.
           EXIT.
      *************************************************************************
       DB-STATUS SECTION.
      *    DISPLAY 'in DB-STATUS, SQLCODE = ' SQLCODE
           IF SQLCODE NOT = 0
              CALL "MySQL_errno" USING PGCTB-ERRNO
              END-CALL
              DISPLAY 'ERRNO: ' PGCTB-ERRNO
              CALL "MySQL_error" USING PGCTB-ERROR-MESSAGE
              END-CALL
              DISPLAY PGCTB-ERROR-MESSAGE
              MOVE SPACES                      TO PGCTB-ERROR-MESSAGE
              STRING  'DB-STATUS: Program '     DELIMITED BY SIZE
                      PGCTB-PROGRAM-NAME         DELIMITED BY SIZE
                      ' SQLCODE='             DELIMITED BY SIZE
                      SQLCODE                  DELIMITED BY SIZE
                      '   SQLCA-SEQUENCE='     DELIMITED BY SIZE
                      SQLCA-SEQUENCE           DELIMITED BY SIZE
                      ' '                      DELIMITED BY SIZE
                                               INTO PGCTB-ERROR-MESSAGE
              PERFORM PGCTB-DISPLAY-ERROR
      *
      * Rollback the work
DBPRE         MOVE 7             TO SQLCA-SEQUENCE
      *       EXEC SQL
      *          ROLLBACK
DBPRE          CALL "MySQL_rollback"
DBPRE          END-CALL
DBPRE          MOVE RETURN-CODE    TO SQLCODE
DBPRE *       END-EXEC.
              MOVE 3                       TO RETURN-CODE
              STOP RUN
           END-IF
           .
       DB-STATUS-EXIT.
           EXIT.
DBPRE *END-EXEC.
                                                 
       Move "tototo" to PrenomB.
       Move "tatata" to NomB.
DBPRE  MOVE 8             TO SQLCA-SEQUENCE
      *EXEC SQL
                                                 
                                                 
DBPRE *       END-EXEC.
DBPRE   MOVE LOW-VALUES TO SQLCA-STATEMENT
DBPRE   STRING
DBPRE   'INSERT ' DELIMITED SIZE
DBPRE   'INTO ' DELIMITED SIZE
DBPRE   'Client ' DELIMITED SIZE
DBPRE   '( ' DELIMITED SIZE
DBPRE   'Nom, ' DELIMITED SIZE
DBPRE   'Prenom, ' DELIMITED SIZE
DBPRE   ') ' DELIMITED SIZE
DBPRE   'VALUES ' DELIMITED SIZE
DBPRE   '( ' DELIMITED SIZE
DBPRE   SQLCA-QUOTE DELIMITED SIZE
DBPRE   NomB DELIMITED SIZE
DBPRE   SQLCA-QUOTE DELIMITED SIZE
DBPRE   ' ' DELIMITED SIZE
DBPRE   ', ' DELIMITED SIZE
DBPRE   SQLCA-QUOTE DELIMITED SIZE
DBPRE   PrenomB, DELIMITED SIZE
DBPRE   SQLCA-QUOTE DELIMITED SIZE
DBPRE   ' ' DELIMITED SIZE
DBPRE   ') ' DELIMITED SIZE
DBPRE   INTO SQLCA-STATEMENT
DBPRE   END-STRING
DBPRE   CALL 'MySQL_query' USING SQLCA-STATEMENT
DBPRE   END-CALL
DBPRE   MOVE RETURN-CODE        TO SQLCODE
       DISPLAY "ESSAI 1".
                                                 
                                                 
       STOP RUN.
0 errors.
